Q.1) Cyclically rotate an array n number of times
     Time Complexity can be O(n2)
      A[] = {1, 2, 3, 4, 5}
     N = 2
     Output;  4 5 1 2 3 


    public class CyclicallyRotatearray{
	
	public static void main(String[] args){
		
        int[] arr = {1, 2, 3, 4, 5};
        int n = 2;
 
        cyclicallyRotate(arr, n);
 
        System.out.println(Arrays.toString(arr));
    }
    public static void rightRotateByOne(int[] arr){
    	
        int last = arr[arr.length - 1];
        for (int i = arr.length - 2; i >= 0; i--) {
            arr[i + 1] = arr[i];
        }
 
        arr[0] = last;
    }
 
    public static void cyclicallyRotate(int[] arr, int n)
    {
        if (n < 0 || n >= arr.length) {
            return;
        }
 
        for (int i = 0; i < n; i++) {
            rightRotateByOne(arr);
        }
    }
 
    
}




       

-------------------------------------------------------------***-------------------------------------------------------------
Q.2) Search Insert Position 
     Given a sorted array of distinct integers and a target value, return the index if the target is found. 
     If not, return the index where it would be if it were inserted in order.
     You must write an algorithm with O(log n) runtime complexity.
     Input: nums = [1,3,5,6], target = 5
     Output: 2
     https://leetcode.com/problems/search-insert-position/description/

Answer
   ---->

    class Solution {
    public int searchInsert(int[] nums, int target) {
        for(int i=0; i<nums.length; i++){
            if(nums[i] >= target){
                return i;
            }
                
        }
        return nums.length;
    }
}

-------------------------------------------------------------***-------------------------------------------------------------